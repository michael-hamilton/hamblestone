{"id":"projects/canvas-gravity-demo/index.html","dependencies":[{"name":"_css_loader","parent":"/Volumes/Projects/Development/Hamblestone/site/pages/projects/canvas-gravity-demo/index.html","resolved":"/usr/local/lib/node_modules/parcel-bundler/src/builtins/css-loader.js"},{"name":"/Volumes/Projects/Development/Hamblestone/site/package.json","includedInParent":true,"mtime":1544239977000}],"generated":{"html":"<!doctype html>\n<html>\n\t\n\t<head>\n\t\t<title>Gravity</title>\n\t\t<style>*, * * {\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 0;\n\t\t\t}</style>\n\t</head>\n\n\t<body>\n\t\t<canvas id=\"canvas\" width=\"640\" height=\"480\"></canvas>\n\t\n\t<script>var c = document.getElementById('canvas'),\n    //canvas element\nctx = c.getContext('2d'),\n    //canvas context\nlastLoop = new Date(),\n    //time of last loop\nfps,\n    //initialize here to calc fps later\ncount = 1000; //number of balls to initialize for use in our demo\n//create a new ball\n\nfunction Ball(r, x, y, vx, vy, color) {\n  this.r = r || 10; //radius\n\n  this.x = x || c.width / 2; //initial x position\n\n  this.y = y || c.height / 4; //initial y position\n\n  this.vx = vx || 0; //initial x velocity\n\n  this.vy = vy || 0; //initial y velocity\n\n  this.gs = 0; //initial gravity speed\n\n  this.g = 0.5; //gravity effect\n\n  this.b = 0.8; //bounce effect\n\n  this.f = 0.97; //fiction effect\n\n  this.c = color || '#000000'; //color\n\n  this.update = function () {\n    this.x += this.vx; //apply x velocity to x position\n\n    this.vy += this.g; //apply gravity to y velocity\n\n    this.y += this.vy; //apply y velocity to y position\n    //if ball is below canvas, reposition to bottom, introduce bounce and apply friction\n\n    if (this.y + this.r > c.height) {\n      this.y = c.height - this.r;\n      this.vy *= -this.b;\n\n      if (Math.abs(this.vx) > 0) {\n        this.vx *= this.f;\n      }\n    } //if ball hits right wall, bounce off and apply friction\n\n\n    if (this.x + this.r > c.width) {\n      this.x = c.width - this.r;\n      this.vx = this.vx * -1;\n      this.vx *= this.f;\n    } //if ball hits left wall, bounce off and apply friction\n\n\n    if (this.x - this.r < 0) {\n      this.vx = this.vx * -1;\n      this.vx *= this.f;\n    }\n\n    this.draw();\n  }; //draw the ball\n\n\n  this.draw = function () {\n    ctx.beginPath();\n    ctx.fillStyle = this.c;\n    ctx.arc(this.x, this.y, this.r, 0, Math.PI * 2, true);\n    ctx.closePath();\n    ctx.fill();\n  };\n} //Draw the world\n\n\nfunction drawWorld() {\n  ctx.fillStyle = \"black\";\n  ctx.fillRect(0, c.height - 1, c.width, c.height); //ground\n\n  ctx.fillRect(c.width - 1, 0, c.width, c.height); //right wall\n} //Calculate FPS\n\n\nfunction calcFPS() {\n  var thisLoop = new Date(); //time of current loop\n\n  fps = 1000 / (thisLoop - lastLoop);\n  lastLoop = thisLoop;\n  ctx.font = \"16px sans-serif\";\n  ctx.fillText(\"fps: \" + Math.round(fps), 0, 16);\n} //Main Loop\n\n\nfunction loop() {\n  ctx.clearRect(0, 0, c.width, c.height); //Clear last frame\n\n  drawWorld(); // ball.update();\n\n  calcFPS();\n  balls.map(function (b) {\n    b.update();\n  });\n  requestAnimationFrame(loop);\n}\n\n; //Create an array of randomly generated balls to be thrown into our 'world'\n\nvar balls = [];\n\nfor (i = 0; i < count; i++) {\n  var tmpVx = Math.floor(Math.random() * 15) + 5,\n      tmpVy = Math.floor(Math.random() * 15) + 5,\n      tmpR = Math.floor(Math.random() * 15) + 5,\n      tmpX = Math.floor(Math.random() * c.width - tmpR) + tmpR,\n      tmpY = Math.floor(Math.random() * c.height - tmpR) + tmpR,\n      tmpColor = '#' + Math.floor(Math.random() * 16777215).toString(16);\n  balls[i] = new Ball(tmpR, tmpX, tmpY, tmpVx, tmpVy, tmpColor);\n}\n\nloop();</script>\n\n\t</body>\n</html>"},"hash":"586bec8df68ecf3f0304b3bba4e77d9e","cacheData":{"env":{}}}