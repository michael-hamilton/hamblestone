{"id":"projects/life/index.html","dependencies":[{"name":"_css_loader","parent":"/Volumes/Projects/Development/Hamblestone/site/pages/projects/life/index.html","resolved":"/usr/local/lib/node_modules/parcel-bundler/src/builtins/css-loader.js"},{"name":"/Volumes/Projects/Development/Hamblestone/site/package.json","includedInParent":true,"mtime":1544239977000}],"generated":{"html":"<!doctype html>\n<html>\n\t\n\t<head>\n\t\t<title>Life</title>\n\t\t<style>*, * * {\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 0;\n\t\t\t}</style>\n\t</head>\n\n\t<body>\n\t\t<canvas id=\"canvas\" width=\"640\" height=\"480\"></canvas>\n\t\t<p>Click on cells to toggle.  Press space to start game</p>\n\t\n\t<script>var c = document.getElementById('canvas'),\n    //canvas element\nctx = c.getContext('2d'); //canvas context\n\ncells = [], //arr\nh = w = 10, //dimensions of each cell (in px)\nspeed = 100, //number of ms between each draw\nstate = false, //current state of game (draw or update)\nsteps = 0; //current number of cycles\n\nfunction init() {\n  for (i = 0; i < c.height / h; i++) {\n    cells[i] = [];\n\n    for (j = 0; j < c.width / w; j++) {\n      cells[i][j] = 0;\n    }\n  } //Toggle the cell at cursor position when canvas is clicked\n\n\n  c.addEventListener('click', function (e) {\n    var x = Math.floor(e.offsetX / w),\n        y = Math.floor(e.offsetY / h);\n    cells[y][x] = cells[y][x] ? 0 : 1;\n  }); //Start game when 'space' is pressed\n\n  window.addEventListener('keydown', function (e) {\n    if (e.keyCode == 32) state = state ? false : true;\n  });\n  draw();\n}\n\nfunction update() {\n  //Temporary array for state of cells in next cycle\n  var result = [];\n\n  function val(x, y) {\n    return cells[x] && cells[x][y];\n  } //Returns amount of neighbor cells that are active\n\n\n  function check(x, y) {\n    var amount = 0;\n    if (val(x - 1, y - 1)) amount++;\n    if (val(x, y - 1)) amount++;\n    if (val(x + 1, y - 1)) amount++;\n    if (val(x - 1, y)) amount++;\n    if (val(x + 1, y)) amount++;\n    if (val(x - 1, y + 1)) amount++;\n    if (val(x, y + 1)) amount++;\n    if (val(x + 1, y + 1)) amount++;\n    return amount;\n  } //Check each cell and update the result array\n\n\n  cells.forEach(function (row, x) {\n    result[x] = [];\n    row.forEach(function (cell, y) {\n      var neighbors = check(x, y);\n\n      if (cell) {\n        if (neighbors == 2 || neighbors == 3) {\n          result[x][y] = 1;\n        } else {\n          result[x][y] = 0;\n        }\n      } else {\n        if (neighbors == 3) result[x][y] = 1;else result[x][y] = 0;\n      }\n    });\n  }); //Copy temporary array back to cells\n\n  cells = result;\n  steps++;\n  draw();\n}\n\nfunction draw() {\n  //Clear last frame\n  ctx.clearRect(0, 0, c.width, c.height); //Draw the cells in the current cycle\n\n  cells.forEach(function (row, y) {\n    row.forEach(function (cell, x) {\n      ctx.fillStyle = cell ? \"#0a90ff\" : '#d7d7d7';\n      ctx.fillRect(x * w + 1, y * h + 1, w - 1, h - 1);\n    });\n  }); //Update step counter\n\n  ctx.fillStyle = 'black';\n  ctx.font = '18px sans-serif';\n  ctx.fillText('Steps: ' + steps, 0, 18); //Update every n number of ms as defined by 'speed'\n\n  setTimeout(function () {\n    if (state) update();else draw();\n  }, speed);\n}\n\ninit();</script>\n\n\t</body>\n</html>"},"hash":"ce3ec2491ddfde14a4c121ba37051d28","cacheData":{"env":{}}}